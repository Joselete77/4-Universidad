import argparse
import random

def checkArguments():
    parser = argparse.ArgumentParser(description='Encripts with rail fence algorithm a file')
    
    parser.add_argument("input", type=str, metavar='INFILE', help="The file to cypher",)
    parser.add_argument('-o', dest = "output", type=str, metavar='OUTFILE',help='Encrypt output file')
    args = parser.parse_args()
    
    if len(vars(args)) < 2:
        print("Error, missing arguments.")
        print("Call the program by this way: python3 railFenceEnc entrada.txt -o salida.enc")
        exit()
    if (args.input == None) or (args.output == None):
        print("Error, bad arguments.")
        print("Call the program by this way: python3 railFenceEnc entrada.txt -o salida.enc")
        exit()
    return args.input, args.output
    
def openFile(path):
    try:
        f = open(path, "r")
        return f
            
    except:
        print('Error, file could not be opened check if file exists.')

def readFile(file):
    try:
        text = file.read() 
        return text
            
    except:
        print('Error, file could not be readed check if file exists.')

def encryptRailFence(text, key):

    rail = [['\n' for i in range(len(text))]
                  for j in range(key)]
     
    dir_down = False
    row, col = 0, 0
     
    for i in range(len(text)):
         
        if (row == 0) or (row == key - 1):
            dir_down = not dir_down
         
        rail[row][col] = text[i]
        col += 1
         
        if dir_down:
            row += 1
        else:
            row -= 1

    result = []
    for i in range(key):
        for j in range(len(text)):
            if rail[i][j] != '\n':
                result.append(rail[i][j])
    textCiphered = "" . join(result)
    return textCiphered
      
def randomKey():
    k = random.randint(2,3)
    return k

def saveCipheredText(cipheredText, path, key):
    try:
        f = open(path, "w")
        f.write(str(key) + '\n' + cipheredText)
    except:
        print('Error, file could not be saved check path.')

if __name__ == "__main__":
    
    input, output = checkArguments()

    key = randomKey()    
    file = openFile(input)
    text = readFile(file)

    cipheredText = encryptRailFence(text, key)
    
    saveCipheredText(cipheredText, output, key)